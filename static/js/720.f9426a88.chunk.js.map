{"version":3,"file":"static/js/720.f9426a88.chunk.js","mappings":"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","sources":["components/Profile.js","components/Map.js","components/getLocation.js","components/AppLayout.js","components/Logo.js"],"sourcesContent":["function Profile({ onClick }) {\r\n  return (\r\n    <div className=\"flex items-center gap-4 bg-[#2D3439] absolute top-4 right-4 z-10 px-4 py-2 rounded-md\">\r\n      <img\r\n        src=\"https://i.pravatar.cc/100?u=zz\"\r\n        alt=\"profile\"\r\n        className=\"rounded-full w-10\"\r\n      />\r\n      <p>Welcome, Jack</p>\r\n      <button\r\n        onClick={onClick}\r\n        className=\"text-xs font-bold px-4 py-2 bg-[#42484D] rounded-md\"\r\n      >\r\n        LOGOUT\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","import {\r\n  MapContainer,\r\n  Marker,\r\n  Popup,\r\n  TileLayer,\r\n  useMap,\r\n  useMapEvents,\r\n} from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport L from \"leaflet\";\r\nimport { useNavigate, useNavigation, useSearchParams } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { logout, setCurrentPosition } from \"./CitiesSlice\";\r\nimport Button from \"./Button\";\r\nimport { getLocation } from \"./getLocation\";\r\nimport Profile from \"./Profile\";\r\n\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\n\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl:\r\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png\",\r\n  iconUrl:\r\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png\",\r\n  shadowUrl:\r\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png\",\r\n});\r\n\r\nfunction Map() {\r\n  const { cities } = useSelector((state) => state.cities);\r\n  const loadingState = useNavigation();\r\n  const isLoading = loadingState.state !== \"idle\";\r\n  const navigate = useNavigate();\r\n  const [searchParams] = useSearchParams();\r\n  const [position, setPosition] = useState([0, 40]);\r\n  const lat = +searchParams.get(\"lat\");\r\n\r\n  const lng = +searchParams.get(\"lng\");\r\n\r\n  useEffect(\r\n    function () {\r\n      if (lat && lng) setPosition([lat, lng]);\r\n    },\r\n    [lat, lng]\r\n  );\r\n  async function handleGetPosition() {\r\n    const data = await getLocation();\r\n    const lat = data.coords.latitude;\r\n    const lng = data.coords.longitude;\r\n    navigate(`/app/form?lat=${lat}&lng=${lng}`);\r\n  }\r\n  const dispatch = useDispatch();\r\n  function handleLogout() {\r\n    dispatch(logout());\r\n  }\r\n  return (\r\n    <div className=\"w-full h-full relative\">\r\n      <Button\r\n        disabled={isLoading}\r\n        onClick={handleGetPosition}\r\n        className=\"absolute left-[50%] translate-x-[-50%] bottom-10 z-10 px-4 py-2 text-sm font-medium disabled:bg-gray-500\"\r\n      >\r\n        {isLoading ? \"loading...\" : \"USE YOUR POSITION\"}\r\n      </Button>\r\n      <Profile onClick={handleLogout} />\r\n      <div className=\"w-full h-full relative z-0\">\r\n        <MapContainer\r\n          center={position}\r\n          zoom={13}\r\n          scrollWheelZoom={true}\r\n          className=\"w-full h-full \"\r\n        >\r\n          <ChangePosition position={position} />\r\n          <HandleClick />\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          <Marker position={position}></Marker>\r\n          {cities.map((el) => (\r\n            <Marker position={[el.position.lat, el.position.lng]} key={el.id}>\r\n              <Popup>\r\n                {el.emoji} {el.cityName} <br /> {el.notes}\r\n              </Popup>\r\n            </Marker>\r\n          ))}\r\n        </MapContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n\r\nfunction ChangePosition({ position }) {\r\n  const map = useMap();\r\n  map.setView(position);\r\n  return null;\r\n}\r\nfunction HandleClick() {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  useMapEvents({\r\n    click: (e) => {\r\n      navigate(`/app/form?lat=${e.latlng.lat}&lng=${e.latlng.lng}`);\r\n      dispatch(setCurrentPosition(`${e.latlng.lat}+${e.latlng.lng}`));\r\n    },\r\n  });\r\n  return null;\r\n}\r\n","export function getLocation() {\r\n  if (navigator.geolocation) {\r\n    return new Promise((resolve, reject) =>\r\n      navigator.geolocation.getCurrentPosition(resolve, reject)\r\n    );\r\n  }\r\n}\r\n","import { NavLink, Outlet, useNavigate } from \"react-router-dom\";\r\nimport Logo from \"./Logo\";\r\nimport Map from \"./Map\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction AppLayout() {\r\n  const navigate = useNavigate();\r\n  const { currentPosition, loggedin } = useSelector((state) => state.cities);\r\n  useEffect(\r\n    function () {\r\n      if (!loggedin) navigate(\"/login\");\r\n    },\r\n    [loggedin, navigate]\r\n  );\r\n  return (\r\n    <div className=\"h-[92dvh] flex \">\r\n      <div className=\"max-w-[550px] bg-[#2D3439] h-[100%] flex flex-col items-center w-[100%]\">\r\n        <Logo className=\" my-8\" />\r\n        <ul className=\"flex w-fit bg-[#42484D] rounded-md tabbed\">\r\n          <li>\r\n            <NavLink\r\n              to=\"/app/cities\"\r\n              className=\"inline-block px-4 py-[3px] rounded-md\"\r\n            >\r\n              Cities\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink\r\n              to=\"countries\"\r\n              className=\"inline-block px-4 py-[3px] rounded-md\"\r\n            >\r\n              Countries\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n        <main className=\"w-[82%] mt-5 overflow-y-scroll\" key={currentPosition}>\r\n          <Outlet />\r\n        </main>\r\n        <footer className=\"mt-auto text-xs font-light mb-8\">\r\n          Â© Copyright 2024 by WorldWise Inc.\r\n        </footer>\r\n      </div>\r\n      <Map />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppLayout;\r\n","import { NavLink } from \"react-router-dom\";\r\n\r\nfunction Logo({ className }) {\r\n  return (\r\n    <NavLink to=\"/\" className={`${className}`}>\r\n      <img\r\n        src={`${process.env.PUBLIC_URL}/logo.png`}\r\n        alt=\"logo\"\r\n        className={`w-[225px] `}\r\n      />\r\n    </NavLink>\r\n  );\r\n}\r\n\r\nexport default Logo;\r\n"],"names":["_ref","onClick","_jsxs","className","children","_jsx","src","alt","L","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","cities","useSelector","state","isLoading","useNavigation","navigate","useNavigate","searchParams","useSearchParams","position","setPosition","useState","lat","get","lng","useEffect","dispatch","useDispatch","Button","disabled","async","data","navigator","geolocation","Promise","resolve","reject","getCurrentPosition","getLocation","coords","latitude","longitude","concat","Profile","logout","MapContainer","center","zoom","scrollWheelZoom","ChangePosition","HandleClick","TileLayer","attribution","url","Marker","map","el","Popup","emoji","cityName","notes","id","useMap","setView","useMapEvents","click","e","latlng","setCurrentPosition","currentPosition","loggedin","Logo","NavLink","to","Outlet","Map","process"],"sourceRoot":""}